import telebot
import re
from telebot import types
import os
import sys
import django

# –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.join(os.path.dirname(__file__), 'crm_panel'))

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_system.crm_panel.settings')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
django.setup()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
from crm_system.leads.models import UserRequest


bot = telebot.TeleBot(os.environ.get("TELEGRAM_TOKEN"))
#YOUR_USER_ID = 1404001228
ADMIN_ID = 1404001228
import os
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

customer_data = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –ü—Ä–æ–¥—É–∫—Ç—ã
PRODUCTS = {
    "bungalow": {
        "name": "–ë—É–Ω–≥–∞–ª–æ",
        "photo": "images/bungalow.webp",
        "desc_file": "description/bungalow.txt"
    },
    "double_bungalow": {
        "name": "–î–≤–æ–π–Ω–æ–µ –±—É–Ω–≥–∞–ª–æ",
        "photo": "images/double_bungalow.webp",
        "desc_file": "description/double_bungalow.txt",
    },
    "royal_cabin": {
        "name": "–ö–û–†–û–õ–ï–í–°–ö–ê–Ø –ö–ê–Æ–¢–ê",
        "photo": "images/royal_cabin.jpg",
        "desc_file": "description/royal_cabin.txt"
    },
    "deluxe_cottage": {
        "name": "–ö–æ—Ç—Ç–µ–¥–∂ –î–µ–ª—é–∫—Å",
        "photo": "images/deluxe_cottage.jpg",
        "desc_file": "description/deluxe_cottage.txt"
    },
    "terranova_1": {
        "name": "Terranova ‚Äì 1 —Å–ø–∞–ª—å–Ω—è",
        "photo": "images/terranova_1.jpg",
        "desc_file": "description/terranova_1.txt"
    },
    "terranova_2": {
        "name": "Terranova ‚Äì 2 —Å–ø–∞–ª—å–Ω–∏",
        "photo": "images/terranova_2.jpg",
        "desc_file": "description/terranova_2.txt"
    },
    "terranova_3": {
        "name": "Terranova ‚Äì 3 —Å–ø–∞–ª—å–Ω–∏",
        "photo": "images/terranova_3.jpg",
        "desc_file": "description/terranova_3.txt"
    },
    "royal_family": {
        "name": "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è —Å–µ–º—å—è",
        "photo": "images/royal_family.jpg",
        "desc_file": "description/royal_family.txt"
    },
    "santorini": {
        "name": "–°–∞–Ω—Ç–æ—Ä–∏–Ω–∏",
        "photo": "images/santorini.jpg",
        "desc_file": "description/santorini.txt"
    },
    "murano": {
        "name": "–ú—É—Ä–∞–Ω–æ",
        "photo": "images/murano.jpg",
        "desc_file": "description/murano.txt"
    },
    "modular_system": {
        "name": "–ú–û–î–£–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê",
        "photo": "images/modular_system.jpg",
        "desc_file": "description/modular_system.txt"
    }
}


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã")
    btn2 = types.KeyboardButton("–°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏")
    btn3 = types.KeyboardButton("–û –Ω–∞—Å")
    btn4 = types.KeyboardButton("–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    btn5 = types.KeyboardButton("–î—Ä—É–≥–æ–µ")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)

    with open('../../PycharmProjects/DiplomBotBuildCompany/.venv/company_intro.txt', 'r', encoding='utf-8') as f:
        company_intro = f.read()
        bot.send_message(chat_id, text=f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å üòä, {message.from_user.first_name}!', reply_markup=markup)
        bot.send_message(chat_id, text=company_intro)

    show_menu(message)


@bot.message_handler(commands=['menu'])
def show_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="portfolio"))
    markup.add(types.InlineKeyboardButton("–°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="services"))
    markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="request"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_inline(call):
    if call.data == "portfolio":
        markup = types.InlineKeyboardMarkup()
        for key, product in PRODUCTS.items():
            markup.add(types.InlineKeyboardButton(product["name"], callback_data=f"product_{key}"))
        bot.send_message(call.message.chat.id, "–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:", reply_markup=markup)
        # bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏:")
        # with open('/Users/albina/PycharmProjects/TelegramBot/venv/images/portfolio1.jpg', 'rb') as photo:
        #     bot.send_photo(call.message.chat.id, photo)
        # with open('/Users/albina/PycharmProjects/TelegramBot/venv/images/portfolio2.jpg', 'rb') as photo:
        #     bot.send_photo(call.message.chat.id, photo)

    elif call.data == "services":
        bot.send_message(call.message.chat.id, text="üåê –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: https://greenhouseru.ru")

    elif call.data == "request":
        bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        bot.register_next_step_handler(call.message, get_name)

    # elif call.data == 'users':
    #     if call.from_user.id == YOUR_USER_ID:
    #         users = UserRequest.objects.all()
    #         if users:
    #             info = ""
    #             for user in users:
    #                 info += f"–ò–º—è: {user.name}, –§–∞–º–∏–ª–∏—è: {user.surname}, –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}, –î–∏–∑–∞–π–Ω: {user.designinfo}\n\n"
    #             bot.send_message(call.message.chat.id, info)
    #         else:
    #             bot.send_message(call.message.chat.id, "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    #     else:
    #         bot.send_message(call.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.')
    elif call.data.startswith("product_"):
        key = call.data.split("product_")[1]
        product = PRODUCTS.get(key)

        if product:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
            try:
                with open(product["photo"], "rb") as photo:
                    bot.send_photo(call.message.chat.id, photo)
            except FileNotFoundError:
                bot.send_message(call.message.chat.id, f"–§–∞–π–ª {product['photo']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # –ß—Ç–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open(product["desc_file"], "r", encoding="utf-8") as f:
                    description = f.read()
            except FileNotFoundError:
                description = "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
            bot.send_message(
                call.message.chat.id,
                f"<b>{product['name']}</b>\n\n{description}",
                parse_mode="HTML"
            )

            # –ö–Ω–æ–ø–∫–∏
            back_markup = types.InlineKeyboardMarkup()
            back_markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="request"))
            back_markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞–º", callback_data="portfolio"))
            bot.send_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=back_markup)


@bot.message_handler(content_types=['text'])
def func(message):
    if message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        bot.send_message(message.chat.id, text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7(900) 257-33-33 \n–ü–æ—á—Ç–∞: greenhouse.mail@yandex.ru")

    elif message.text == "–°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏":
        bot.send_message(message.chat.id, text=" üåê–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –í—ã –º–æ–∂–µ—Ç–µ  –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ https://greenhouseru.ru")

    elif message.text == "–û –Ω–∞—Å":
        with open('about_us.txt', 'r', encoding='utf-8') as f:
            company_intro = f.read()
        bot.send_message(message.chat.id, text=company_intro)

    elif message.text == "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        with open('questions.txt', 'r', encoding='utf-8') as f:
            questions = f.read()
        bot.send_message(message.chat.id, text=questions)

    elif message.text == "–î—Ä—É–≥–æ–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton("–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã"),
            types.KeyboardButton("–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã"),
            types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"),
            types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        )
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", reply_markup=markup)

    elif message.text == "–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã":
        markup = types.InlineKeyboardMarkup()
        for key, product in PRODUCTS.items():
            markup.add(types.InlineKeyboardButton(product["name"], callback_data=f"product_{key}"))
        bot.send_message(message.chat.id, "–ù–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:", reply_markup=markup)

    elif message.text == "–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã":
        with open('work_point.txt', 'r', encoding='utf-8') as f:
            price_and_services = f.read()
        bot.send_message(message.chat.id, text=price_and_services)

    elif message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        bot.register_next_step_handler(message, get_name)

    # elif message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏":
    #     if message.from_user.id == YOUR_USER_ID:
    #         users = UserRequest.objects.all()
    #         if users:
    #             info = ""
    #             for user in users:
    #                 info += f"–ò–º—è: {user.name}, –§–∞–º–∏–ª–∏—è: {user.surname}, –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}, –î–∏–∑–∞–π–Ω: {user.designinfo}\n\n"
    #             bot.send_message(message.chat.id, info)
    #         else:
    #             bot.send_message(message.chat.id, "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    #     else:
    #         bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.')

    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        start(message)

    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("product_"))
def handle_product_selection(call):
    product_key = call.data.replace("product_", "")
    product = PRODUCTS.get(product_key)

    if not product:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(product["photo"], "rb") as photo:
            bot.send_photo(call.message.chat.id, photo, caption=product["description"])
    except Exception:
        bot.send_message(call.message.chat.id, product["description"] + "\n\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="request"))
    markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞–º", callback_data="portfolio"))
    bot.send_message(call.message.chat.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)

def get_name(message):
    chat_id = message.chat.id
    customer_data[chat_id] = {}
    customer_data[chat_id]['name'] = message.text.strip()
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')
    bot.register_next_step_handler(message, get_surname)


def get_surname(message):
    chat_id = message.chat.id
    customer_data[chat_id]['surname'] = message.text.strip()
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    bot.register_next_step_handler(message, get_phone)


def get_phone(message):
    chat_id = message.chat.id
    phone = message.text.strip()

    if not re.match(r'^(\+7|8)\d{10}$', phone):
        bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890 –∏–ª–∏ 81234567890:')
        bot.register_next_step_handler(message, get_phone)
        return

    customer_data[chat_id]['phone'] = phone
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@mail.ru):')
    bot.register_next_step_handler(message, get_email)

def get_email(message):
        chat_id = message.chat.id
        email = message.text.strip()

        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
        if not re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', email):
            bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:')
            bot.register_next_step_handler(message, get_email)
            return

        customer_data[chat_id]['email'] = email
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —É –Ω–∞—Å:')
        bot.register_next_step_handler(message, get_project_info)


def get_project_info(message):
    chat_id = message.chat.id
    orderinfo = message.text.strip()
    data = customer_data.get(chat_id, {})

    UserRequest.objects.create(
        name=data.get('name'),
        surname=data.get('surname'),
        phone=data.get('phone'),
        email=data.get('email'),
        orderinfo=orderinfo
    )

    bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞!')
    customer_data.pop(chat_id, None)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    admin_msg = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏!\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–§–∞–º–∏–ª–∏—è: {data.get('surname')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
    )
    bot.send_message(ADMIN_ID, admin_msg)

bot.polling(none_stop=True)
